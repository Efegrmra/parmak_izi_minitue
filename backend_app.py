# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nsn6kmCOP581qLVfm4DJlQMF3iX3djaT
"""

import os, pathlib
from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv
from backend_utils import (
    ensure_tools, save_upload_to_tmp, nfseg_segment,
    mindtct_extract, nfiq2_score, bozorth3_score,
    create_all_minutiae_png_base64  # <-- DEĞİŞTİ (Yeni fonksiyonu import et)
)

load_dotenv()
app = FastAPI(title="NBIS Fingerprint Backend", version="1.0.0")

origins = (os.getenv("ALLOWED_ORIGINS") or "").split(",")
allow_all = any(o.strip() in ["*", ""] for o in origins)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"] if allow_all else [o.strip() for o in origins if o.strip()],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class CompareResponse(BaseModel):
    bozorth3_score: int
    a_quality: dict | None = None
    b_quality: dict | None = None
    quality_summary: str | None = None
    a_png_b64: str | None = None
    b_png_b64: str | None = None

class AnalyzeResponse(BaseModel):
    nfiq2: dict | None = None
    notes: str | None = None

@app.get("/health")
def health():
    missing = ensure_tools()
    return {"status": "ok" if not missing else "degraded", "missing": missing}

@app.post("/analyze", response_model=AnalyzeResponse)
async def analyze(file: UploadFile = File(...), use_nfseg: bool = False):
    try:
        content = await file.read()
        suffix = pathlib.Path(file.filename).suffix or ".img"
        img_path = save_upload_to_tmp(content, suffix)
        seg_path = nfseg_segment(img_path, img_path + "_seg") if use_nfseg else img_path
        nfiq = nfiq2_score(seg_path)
        return AnalyzeResponse(nfiq2=nfiq, notes="Processed with nfseg" if use_nfseg else None)
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/compare", response_model=CompareResponse)
async def compare(
    a: UploadFile | None = File(None),
    b: UploadFile | None = File(None),
    file1: UploadFile | None = File(None),
    file2: UploadFile | None = File(None),
    use_nfseg: bool = False,
    include_quality: bool = True,
):
    try:
        A = a or file1
        B = b or file2
        if not A or not B:
            raise HTTPException(status_code=400, detail="Two files are required: use fields 'a' and 'b' or 'file1' and 'file2'.")

        a_bytes = await A.read()
        b_bytes = await B.read()
        a_suffix = pathlib.Path(A.filename).suffix or ""
        b_suffix = pathlib.Path(B.filename).suffix or ""
        
        a_path = save_upload_to_tmp(a_bytes, a_suffix or ".wsq")
        b_path = save_upload_to_tmp(b_bytes, b_suffix or ".wsq")

        a_proc = nfseg_segment(a_path, a_path + "_seg") if use_nfseg else a_path
        b_proc = nfseg_segment(b_path, b_path + "_seg") if use_nfseg else b_path

        a_xyt = mindtct_extract(a_proc, a_proc + "_mindtct")
        b_xyt = mindtct_extract(b_proc, b_proc + "_mindtct")

        # Skoru hala hesaplıyoruz, ancak 'matched_pairs' listesini kullanmayacağız
        score, _ = bozorth3_score(a_xyt, b_xyt)

        a_q = nfiq2_score(a_proc) if include_quality else None
        b_q = nfiq2_score(b_proc) if include_quality else None

        qs = None
        try:
            if a_q and b_q:
                av = (float(str(a_q.get("score", 0))) + float(str(b_q.get("score", 0)))) / 2.0
                qs = f"avg NFIQ2 ≈ {av:.2f}"
        except Exception:
            pass

        # --- DEĞİŞİKLİK: TÜM NOKTALARI ÇİZEN FONKSİYONU ÇAĞIR ---
        # Artık 'matched_indices' listesine ihtiyacımız yok.
        # Fonksiyon, .xyt yolunu kullanarak TÜM noktaları okuyacak ve çizecek.
        
        a_b64 = create_all_minutiae_png_base64(a_bytes, a_suffix, a_xyt)
        b_b64 = create_all_minutiae_png_base64(b_bytes, b_suffix, b_xyt)
        # --- DEĞİŞİKLİK SONU ---

        return CompareResponse(
            bozorth3_score=score,
            a_quality=a_q,
            b_quality=b_q,
            quality_summary=qs,
            a_png_b64=a_b64,
            b_png_b64=b_b64
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
